{"version":3,"sources":["Components/Card.js","Components/Cardlist.js","Components/Searchbox.js","Components/Scroll.js","Components/ErrorBoundry.js","Containers/MyApp.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","Cardlist","robots","map","user","i","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","MyApp","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"wOAgBeA,EAZF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC1B,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,gCACE,oBAAIC,UAAU,KAAd,SAAoBH,IACpB,4BAAIC,WCkBGK,EAtBE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAIjB,OACE,8BAEIA,EAAOC,KAAI,SAACC,EAAKC,GACjB,OACE,cAAC,EAAD,CAEER,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,OAHZS,SCEFC,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC/B,OACE,qBAAKV,UAAU,MAAf,SACE,uBACEA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCIHI,EATA,SAACC,GAEd,OADAC,QAAQC,IAAIF,GAEV,qBAAKG,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACGN,EAAMO,YCgBEC,E,kDAvBb,WAAYR,GAAO,IAAD,8BAChB,cAAMA,IACDS,MAAQ,CACXC,UAAU,GAHI,E,8DAQAC,EAAOC,GACvBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SAEV,4DAIGG,KAAKb,MAAMO,a,GArBKQ,aC4EZC,G,wDA1Db,aAAc,IAAD,8BAEX,gBAqBFC,eAAiB,SAACC,GAEhB,EAAKJ,SAAS,CAACpB,YAAawB,EAAMC,OAAOC,SArBzC,EAAKX,MAAQ,CACXpB,OAAQ,GACRK,YAAa,IANJ,E,gEAWQ,IAAD,OAElB2B,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACzB,OAAQoC,S,+BAgBlC,MAEwBZ,KAAKJ,MAA5BpB,EAFD,EAECA,OAAQK,EAFT,EAESA,YAITgC,EAAiBrC,EAAOsC,QAAO,SAAAC,GACnC,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASpC,EAAYmC,kBAGvD,OAAQxC,EAAO0C,OAGX,sBAAK9C,UAAU,KAAf,UACE,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CAAWU,aAAckB,KAAKI,iBAC9B,cAAC,EAAD,UACE,cAAC,EAAD,UACE,cAAC,EAAD,CAAU5B,OAAQqC,WAP1B,6C,GA3CcX,cCPLiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCWdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.69c0c72d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n// const {name, email, id} = props wird direkt im (props) destructored\r\n// Karten für jeden Roboter\r\nconst Card = ({name, email, id}) => {\r\n  return (\r\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n      <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\r\n      <div>\r\n        <h2 className='f5'>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\n// {Javascript}\r\n// Liste mit allen Karten und einem Array, sodass jede Karte einem Roboter entspricht\r\nconst Cardlist = ({robots}) => {\r\n  // if(true){\r\n  //   throw new Error('Something went wrong!');\r\n  // }\r\n  return (\r\n    <div>\r\n      {\r\n        robots.map((user,i) => {\r\n        return (\r\n          <Card\r\n            key={i}\r\n            id={robots[i].id}\r\n            name={robots[i].name}\r\n            email={robots[i].email}\r\n          />\r\n        );\r\n      })\r\n    }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Cardlist;\r\n","import React from 'react';\r\n\r\n// Box zur Suche nach den Robotfriends\r\n// Immer beim triggern des onchange wird die Funktion searchChange ausgeführt\r\n// In myApp ist Searchchange = onSearchChange\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input\r\n        className='pa3 ba b--green bg-lightest-blue'\r\n        type='search'\r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Searchbox;\r\n","import React from 'react';\r\n\r\n// Componente, damit der untere Bereich Scrollable ist\r\n// Neben Props und State, gibt es noch children\r\n// Jede Componente in react wird ein Props und beinhaltet children\r\n// mit props.children werden die Selbsterzeugten Components angesprochen\r\n// {javascrip{objekt mit css styles}}-> {{}}\r\nconst Scroll = (props) => {\r\n  console.log(props);\r\n  return(\r\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Scroll;\r\n","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component{\r\n  // Zugriff auf Kindelemente\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n// Was passiert, wenn Fehler gecatched wird?\r\n  componentDidCatch(error, info){\r\n    this.setState({hasError: true});\r\n  }\r\n\r\n  render(){\r\n    if(this.state.hasError){\r\n      return (\r\n        <h1>Ooooops. That is not good!</h1>\r\n      );\r\n    }\r\n    // Wenn kein Error, dann Kind ausgeben\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry;\r\n","import React, {Component}  from 'react';\r\nimport Cardlist from '../Components/Cardlist';\r\nimport Searchbox from '../Components/Searchbox';\r\nimport Scroll from '../Components/Scroll';\r\nimport ErrorBoundry from '../Components/ErrorBoundry';\r\nimport './MyApp.css';\r\n\r\n// Dies ist ein SmartComponent, anders als die Kinder\r\n\r\n// Mounting, by refresh wird diese Componente ind das div id=root eingefügt >> Start der MyApp\r\n// Constuctor, ComponentWillMount, Render, ComponentDidMount vorhanden?\r\n// Updating -> ComponentWillReceiveProps, shouldComponentUpdate, ComponentWillUpdate, Render, ComponentDidUpdate\r\n// Unmounting -> Componente von der Seite entfernen\r\n// Diese Funktionen nennt man Life-Cycle-Hooks\r\n\r\n// Elternelement, damit alle Componenten vereint sind und dann nur eine Componente übergeben wird\r\n// State beschreibt unser Objekt und kann verändert werden\r\n// Props sind einfache Sachen, die aus State kommen\r\n// State >> Props\r\nclass MyApp extends Component{\r\n  constructor(){\r\n    // Super wird immer gebraucht\r\n    super()\r\n    // Hier wird der State beschrieben\r\n    this.state = {\r\n      robots: [],\r\n      searchfield: ''\r\n    }\r\n    // console.log('Construct');\r\n  }\r\n\r\n  componentDidMount() {\r\n    //Window Methode-> Request to Server\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({robots: users}));\r\n    // console.log('check');\r\n    // State wird upgedated -> Es wird anschließend nochmal gerendert\r\n\r\n    // console.log('DidMount');\r\n  }\r\n\r\n// Funktion zur Kommunikation mit der Searchbox\r\n  onSearchChange = (event) => {\r\n    // State updaten\r\n    this.setState({searchfield: event.target.value});\r\n    // Ausgabe des Event Values (gedrückte Taste)\r\n      // console.log(event.target.value);\r\n\r\n  }\r\n\r\n  render(){\r\n    // destructoring\r\n    const {robots, searchfield} = this.state;\r\n    // Filter durch das Robotsarray.\r\n    // Checken, ob das ArrayElement die Eingabe aus dem Searchfield enthält\r\n    // Gib nur die Robots aus, die die Suche beinhalten\r\n    const filteredRobots = robots.filter(robot => {\r\n      return robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    })\r\n    // Wenn robots === 0, dann (h1) ansonsten (div ...)\r\n    return !robots.length ?\r\n      <h1>Loading</h1> :\r\n      (\r\n        <div className='tc'>\r\n          <h1 className='f1'>RoboFriends</h1>\r\n          <Searchbox searchChange={this.onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <Cardlist robots={filteredRobots}/>\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n      );\r\n    // console.log('Render');\r\n  }\r\n}\r\n\r\nexport default MyApp;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport MyApp from './Containers/MyApp';\n// Destructor from robots -> {var1, var2, var3}\n// import App from './Components/App';\n// import Hello from './Components/Hello';\nimport reportWebVitals from './reportWebVitals';\n\n// ReactDOM.render(\n//   // <React.StrictMode>\n//   //   <App />\n//   // </React.StrictMode>,\n//   <Hello greeting={'Hello React Ninja'} />,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(\n  <MyApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}